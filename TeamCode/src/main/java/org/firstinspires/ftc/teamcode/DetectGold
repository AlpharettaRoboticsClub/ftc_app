package org.firstinspires.ftc.robotcontroller.external.samples;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.util.ElapsedTime;

import java.util.List;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer.CameraDirection;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
//import org.firstinspires.ftc.robotcore.external

/*fixing errors:
- used alt enter
- renamed teleop or autonomous class
- add the @autonomous to get it to display on the phone
- use the suggestions that pop up instead of the old code
- make sure you have all the right imports
- switch the device you're using
- re-download android studio
- DISABLE instant run: try on the eclipse computer
- reinstall the ftc project on git hub (look for constant updates)
- make sure the package name matches the file name under java exactly (org.firstinspires.ftc.robot.controller etc)
that name should be the same for the package name and the file name under java that's usually gray
*/

// written: Ava Paikeday last edited: 12/7/18

/**
 * This 2018-2019 OpMode illustrates the basics of using the TensorFlow Object Detection API to
 * determine the position of the gold and silver minerals.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list.
 *
 * IMPORTANT: In order to use this OpMode, you need to obtain your own Vuforia license key as
 * is explained below.
 */
//@Disabled
@Autonomous(name = "DetectGold", group = "Concept")


public class DetectGold extends LinearOpMode {
    private static final String TFOD_MODEL_ASSET = "RoverRuckus.tflite";
    private static final String LABEL_GOLD_MINERAL = "Gold Mineral";
    private static final String LABEL_SILVER_MINERAL = "Silver Mineral";
    public static String goldPosition;


    /*
     * IMPORTANT: You need to obtain your own license key to use Vuforia. The string below with which
     * 'parameters.vuforiaLicenseKey' is initialized is for illustration only, and will not function.
     * A Vuforia 'Development' license key, can be obtained free of charge from the Vuforia developer
     * web site at https://developer.vuforia.com/license-manager.
     *
     * Vuforia license keys are always 380 characters long, and look as if they contain mostly
     * random data. As an example, here is a example of a fragment of a valid key:
     *      ... yIgIzTqZ4mWjk9wd3cZO9T1axEqzuhxoGlfOOI2dRzKS4T0hQ8kT ...
     * Once you've obtained a license key, copy the string from the Vuforia web site
     * and paste it in to your code on the next line, between the double quotes.
     */
    private static final String VUFORIA_KEY = "AUXvMwv/////AAABmclJvyt7mkdZpy833jcSM00PiZcihtP" +
            "nP0w+XCYcJQd6twQ24TIZcARjPqzGXn0cfiS1mwqWOFfeHupZeeLE6/vAlz5B6UvxGSmMnFEotK0jkn1j" +
            "rZhpdDY2ifg/I5Axs0cdy06mdyvAcexrR6mDU5Az2T8CBCnNEiQXq82Ozu77WOttFYRfhKul/N/vHlDFL" +
            "2xSPZPjSPFBPEcqkd4T0bADPAxCDk/fVqZT31KR4BCtrVy5EIb6TPoLnIiBTRsmtHAyofnJ9Spvvr0FKK" +
            "DLt3AqnNOS/nn2874v8IjUSPVKaSSHeQGoeY5y6jpqGKjxu1z7NPXMutvJLNSvuTiSAmsmGjmE53RD9sYs" +
            "9HxXiobA";

    /**
     * {@link #vuforia} is the variable we will use to store our instance of the Vuforia
     * localization engine.
     */
    private VuforiaLocalizer vuforia;

    /**
     * {@link #tfod} is the variable we will use to store our instance of the Tensor Flow Object
     * Detection engine.
     */
    private TFObjectDetector tfod;

    @Override
    public void runOpMode() {
        // The TFObjectDetector uses the camera frames from the VuforiaLocalizer, so we create that
        // first.
        initVuforia();
        robot.init(hardwareMap);



        if (ClassFactory.getInstance().canCreateTFObjectDetector()) {
            initTfod();
        } else {
            telemetry.addData("Sorry!", "This device is not compatible with TFOD");
        }

        /** Wait for the game to begin */
        telemetry.addData(">", "Press Play to start tracking");
        telemetry.update();
        waitForStart();

        if (opModeIsActive()) {
            /** Activate Tensor Flow Object Detection. */
            if (tfod != null) {
                tfod.activate();
            }

            while (opModeIsActive()) {
                if (tfod != null) {
                    // getUpdatedRecognitions() will return null if no new information is available since
                    // the last time that call was made.
                    List<Recognition> updatedRecognitions = tfod.getUpdatedRecognitions();
                    if (updatedRecognitions != null) {
                        telemetry.addData("# Object Detected", updatedRecognitions.size());
                        if (updatedRecognitions.size() == 3) {
                            int goldMineralX = -1;
                            int silverMineral1X = -1;
                            int silverMineral2X = -1;
                            for (Recognition recognition : updatedRecognitions) {
                                if (recognition.getLabel().equals(LABEL_GOLD_MINERAL)) {
                                    goldMineralX = (int) recognition.getLeft();
                                } else if (silverMineral1X == -1) {
                                    silverMineral1X = (int) recognition.getLeft();
                                } else {
                                    silverMineral2X = (int) recognition.getLeft();
                                }
                            }
                            if (goldMineralX != -1 && silverMineral1X != -1 && silverMineral2X != -1) {
                                if (goldMineralX < silverMineral1X && goldMineralX < silverMineral2X) {
                                    telemetry.addData("Gold Mineral Position", "Left");
                                    //goldPosition = "left";
                                    driveMethod(0.5, 0, 0.7);     //turn robot to the right
                                    driveMethod(0.5, 0.5, 2.0); //drive robot straight (enough to clear the center mineral so that it can turn and drive without hitting the center mineral)
                                    driveMethod(0, 0.5, 0.5);   //turn robot left
                                    driveMethod(0.5, 0.5, 1.7); //drive robot straight into crater
                                } else if (goldMineralX > silverMineral1X && goldMineralX > silverMineral2X) {
                                    telemetry.addData("Gold Mineral Position", "Right");
                                  //  goldPosition = "right";
                                    driveMethod(0, 0.5, 0.5);   //turn robot to the left
                                    driveMethod(0.5, 0.5, 2.0); //drive robot straight (enough to clear the center mineral so that it can turn and drive without hitting the center mineral)
                                    driveMethod(0.5, 0, 0.5);   //turn robot right
                                    driveMethod(0.5, 0.5, 1.7); //drive robot straight into crater

                                } else {
                                    telemetry.addData("Gold Mineral Position", "Center");
                                    goldPosition = "center";
                                    driveMethod(0.5, 0.5, 2.5); //drive robot straight into crater

                                }
                            }
                        }
                        telemetry.update();
                    }
                }
            }
        }

        if (tfod != null) {
            tfod.shutdown();
        }
    }

    /**
     * Initialize the Vuforia localization engine.
     */
    private void initVuforia() {
        /*
         * Configure Vuforia by creating a Parameter object, and passing it to the Vuforia engine.
         */
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraDirection = CameraDirection.BACK;

        //  Instantiate the Vuforia engine
        vuforia = ClassFactory.getInstance().createVuforia(parameters);

        // Loading trackables is not necessary for the Tensor Flow Object Detection engine.
    }

    /**
     * Initialize the Tensor Flow Object Detection engine.
     */
    private void initTfod() {
        int tfodMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(
                "tfodMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters(tfodMonitorViewId);
        tfod = ClassFactory.getInstance().createTFObjectDetector(tfodParameters, vuforia);
        tfod.loadModelFromAsset(TFOD_MODEL_ASSET, LABEL_GOLD_MINERAL, LABEL_SILVER_MINERAL);
    }


    org.firstinspires.ftc.teamcode.HardwarePushBot robot = new org.firstinspires.ftc.teamcode.HardwarePushBot();
    /* NOTES:
    - try taking out the initialization and seeing if that allows it to continue on with the program after it has identified
    where the gold mineral is.
    - have the robot move forward so that it gets a better view of the minerals before it performs sampling
    - create default setting that makes it drive straight forward after 10 seconds if it has not determined the position of the gold mineral
    - what is a recursive call?
    - try keeping the code so that TFOD is in gold detection class and the actual auton pogram is in one of the other 2 auton programs
    - you dont really need 2 auton programs becuase they're both driving to the relative same place. Though you might have to add different
    code for the deploying of the marker on the depot
     */
    private ElapsedTime runtime = new ElapsedTime();

    // static final double     FORWARD_SPEED = 0.6; //not sure if we'll need these
    // static final double     TURN_SPEED    = 0.5;


    public void driveMethod(double rightSpeed, double leftSpeed, double secs) {
        // The motors are being set to a speed given within the parameters
        robot.rightFrontDrive.setPower(rightSpeed);
        robot.rightBackDrive.setPower(rightSpeed);
        robot.leftFrontDrive.setPower(leftSpeed);
        robot.leftBackDrive.setPower(leftSpeed);

        // Resets the runtime to 0 so that when calculating speed, the previous time is not impacting the amount of time a call should
        // run for (double sec). If you are still confused about this ask Shreya.
        runtime.reset();

        // Runs the action only if the OpMode is still running and active and if the reset runtime is less than the variable, double sec.
        while (opModeIsActive() && (runtime.seconds() < secs)) {
            telemetry.addData("Path", "Leg 1: %2.5f S Elapsed", runtime.seconds());
            telemetry.update();
        }


        //  @Override
        //   public void runOpMode () {

        // Initializes the motors declared in hardwareMap or HardwareMap class.
      // robot.init(hardwareMap);

        // Send telemetry message to signify robot waiting;
     //   telemetry.addData("Status", "Ready to run");    //
      //  telemetry.update();


        // This method is used for setting the motors to a specified speed and for a set amount of seconds


       // waitForStart();

/*
        if (goldPosition == "left") {
            driveMethod(0.5, 0, 2.0);     //turn robot to the right
            driveMethod(0.5, 0.5, 3.0); //drive robot straight (enough to clear the center mineral so that it can turn and drive without hitting the center mineral)
            driveMethod(0, 0.5, 2.0);   //turn robot left
            driveMethod(0.5, 0.5, 3.0); //drive robot straight into crater

        } else if (goldPosition == "right") { // if I try to use .equals then I get an error
            driveMethod(0, 0.5, 2.0);   //turn robot to the left
            driveMethod(0.5, 0.5, 3.0); //drive robot straight (enough to clear the center mineral so that it can turn and drive without hitting the center mineral)
            driveMethod(0.5, 0, 2.0);   //turn robot right
            driveMethod(0.5, 0.5, 3.0); //drive robot straight into crater

        } else {
            //drive robot straight into crater
            driveMethod(0.5, 0.5, 4.0); //drive robot straight into crater

        }
        */
    }
}












   

          
                  
    
